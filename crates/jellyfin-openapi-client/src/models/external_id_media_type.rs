/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// ExternalIdMediaType : The specific media type of an MediaBrowser.Model.Providers.ExternalIdInfo.

/// The specific media type of an MediaBrowser.Model.Providers.ExternalIdInfo.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ExternalIdMediaType {
    #[serde(rename = "Album")]
    Album,
    #[serde(rename = "AlbumArtist")]
    AlbumArtist,
    #[serde(rename = "Artist")]
    Artist,
    #[serde(rename = "BoxSet")]
    BoxSet,
    #[serde(rename = "Episode")]
    Episode,
    #[serde(rename = "Movie")]
    Movie,
    #[serde(rename = "OtherArtist")]
    OtherArtist,
    #[serde(rename = "Person")]
    Person,
    #[serde(rename = "ReleaseGroup")]
    ReleaseGroup,
    #[serde(rename = "Season")]
    Season,
    #[serde(rename = "Series")]
    Series,
    #[serde(rename = "Track")]
    Track,

}

impl ToString for ExternalIdMediaType {
    fn to_string(&self) -> String {
        match self {
            Self::Album => String::from("Album"),
            Self::AlbumArtist => String::from("AlbumArtist"),
            Self::Artist => String::from("Artist"),
            Self::BoxSet => String::from("BoxSet"),
            Self::Episode => String::from("Episode"),
            Self::Movie => String::from("Movie"),
            Self::OtherArtist => String::from("OtherArtist"),
            Self::Person => String::from("Person"),
            Self::ReleaseGroup => String::from("ReleaseGroup"),
            Self::Season => String::from("Season"),
            Self::Series => String::from("Series"),
            Self::Track => String::from("Track"),
        }
    }
}

impl Default for ExternalIdMediaType {
    fn default() -> ExternalIdMediaType {
        Self::Album
    }
}




