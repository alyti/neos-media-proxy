/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// DlnaOptions : The DlnaOptions class contains the user definable parameters for the dlna subsystems.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DlnaOptions {
    /// Gets or sets a value indicating whether gets or sets a value to indicate the status of the dlna playTo subsystem.
    #[serde(rename = "EnablePlayTo", skip_serializing_if = "Option::is_none")]
    pub enable_play_to: Option<bool>,
    /// Gets or sets a value indicating whether gets or sets a value to indicate the status of the dlna server subsystem.
    #[serde(rename = "EnableServer", skip_serializing_if = "Option::is_none")]
    pub enable_server: Option<bool>,
    /// Gets or sets a value indicating whether detailed dlna server logs are sent to the console/log.  If the setting \"Emby.Dlna\": \"Debug\" msut be set in logging.default.json for this property to work.
    #[serde(rename = "EnableDebugLog", skip_serializing_if = "Option::is_none")]
    pub enable_debug_log: Option<bool>,
    /// Gets or sets a value indicating whether whether detailed playTo debug logs are sent to the console/log.  If the setting \"Emby.Dlna.PlayTo\": \"Debug\" msut be set in logging.default.json for this property to work.
    #[serde(rename = "EnablePlayToTracing", skip_serializing_if = "Option::is_none")]
    pub enable_play_to_tracing: Option<bool>,
    /// Gets or sets the ssdp client discovery interval time (in seconds).  This is the time after which the server will send a ssdp search request.
    #[serde(rename = "ClientDiscoveryIntervalSeconds", skip_serializing_if = "Option::is_none")]
    pub client_discovery_interval_seconds: Option<i32>,
    /// Gets or sets the frequency at which ssdp alive notifications are transmitted.
    #[serde(rename = "AliveMessageIntervalSeconds", skip_serializing_if = "Option::is_none")]
    pub alive_message_interval_seconds: Option<i32>,
    /// Gets or sets the frequency at which ssdp alive notifications are transmitted. MIGRATING - TO BE REMOVED ONCE WEB HAS BEEN ALTERED.
    #[serde(rename = "BlastAliveMessageIntervalSeconds", skip_serializing_if = "Option::is_none")]
    pub blast_alive_message_interval_seconds: Option<i32>,
    /// Gets or sets the default user account that the dlna server uses.
    #[serde(rename = "DefaultUserId", skip_serializing_if = "Option::is_none")]
    pub default_user_id: Option<String>,
    /// Gets or sets a value indicating whether playTo device profiles should be created.
    #[serde(rename = "AutoCreatePlayToProfiles", skip_serializing_if = "Option::is_none")]
    pub auto_create_play_to_profiles: Option<bool>,
    /// Gets or sets a value indicating whether to blast alive messages.
    #[serde(rename = "BlastAliveMessages", skip_serializing_if = "Option::is_none")]
    pub blast_alive_messages: Option<bool>,
    /// gets or sets a value indicating whether to send only matched host.
    #[serde(rename = "SendOnlyMatchedHost", skip_serializing_if = "Option::is_none")]
    pub send_only_matched_host: Option<bool>,
}

impl DlnaOptions {
    /// The DlnaOptions class contains the user definable parameters for the dlna subsystems.
    pub fn new() -> DlnaOptions {
        DlnaOptions {
            enable_play_to: None,
            enable_server: None,
            enable_debug_log: None,
            enable_play_to_tracing: None,
            client_discovery_interval_seconds: None,
            alive_message_interval_seconds: None,
            blast_alive_message_interval_seconds: None,
            default_user_id: None,
            auto_create_play_to_profiles: None,
            blast_alive_messages: None,
            send_only_matched_host: None,
        }
    }
}


