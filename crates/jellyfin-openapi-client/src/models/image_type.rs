/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.3
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::fmt;

/// ImageType : Enum ImageType.

/// Enum ImageType.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ImageType {
    #[serde(rename = "Primary")]
    Primary,
    #[serde(rename = "Art")]
    Art,
    #[serde(rename = "Backdrop")]
    Backdrop,
    #[serde(rename = "Banner")]
    Banner,
    #[serde(rename = "Logo")]
    Logo,
    #[serde(rename = "Thumb")]
    Thumb,
    #[serde(rename = "Disc")]
    Disc,
    #[serde(rename = "Box")]
    _Box,
    #[serde(rename = "Screenshot")]
    Screenshot,
    #[serde(rename = "Menu")]
    Menu,
    #[serde(rename = "Chapter")]
    Chapter,
    #[serde(rename = "BoxRear")]
    BoxRear,
    #[serde(rename = "Profile")]
    Profile,

}

impl fmt::Display for ImageType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let x = match self {
            Self::Primary => String::from("Primary"),
            Self::Art => String::from("Art"),
            Self::Backdrop => String::from("Backdrop"),
            Self::Banner => String::from("Banner"),
            Self::Logo => String::from("Logo"),
            Self::Thumb => String::from("Thumb"),
            Self::Disc => String::from("Disc"),
            Self::_Box => String::from("Box"),
            Self::Screenshot => String::from("Screenshot"),
            Self::Menu => String::from("Menu"),
            Self::Chapter => String::from("Chapter"),
            Self::BoxRear => String::from("BoxRear"),
            Self::Profile => String::from("Profile"),
        };
        write!(f, "{}", x)
    }
}

impl Default for ImageType {
    fn default() -> ImageType {
        Self::Primary
    }
}




