/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.3
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TranscodingInfo {
    #[serde(rename = "AudioCodec", skip_serializing_if = "Option::is_none")]
    pub audio_codec: Option<String>,
    #[serde(rename = "VideoCodec", skip_serializing_if = "Option::is_none")]
    pub video_codec: Option<String>,
    #[serde(rename = "Container", skip_serializing_if = "Option::is_none")]
    pub container: Option<String>,
    #[serde(rename = "IsVideoDirect", skip_serializing_if = "Option::is_none")]
    pub is_video_direct: Option<bool>,
    #[serde(rename = "IsAudioDirect", skip_serializing_if = "Option::is_none")]
    pub is_audio_direct: Option<bool>,
    #[serde(rename = "Bitrate", skip_serializing_if = "Option::is_none")]
    pub bitrate: Option<i32>,
    #[serde(rename = "Framerate", skip_serializing_if = "Option::is_none")]
    pub framerate: Option<f32>,
    #[serde(rename = "CompletionPercentage", skip_serializing_if = "Option::is_none")]
    pub completion_percentage: Option<f64>,
    #[serde(rename = "Width", skip_serializing_if = "Option::is_none")]
    pub width: Option<i32>,
    #[serde(rename = "Height", skip_serializing_if = "Option::is_none")]
    pub height: Option<i32>,
    #[serde(rename = "AudioChannels", skip_serializing_if = "Option::is_none")]
    pub audio_channels: Option<i32>,
    #[serde(rename = "HardwareAccelerationType", skip_serializing_if = "Option::is_none")]
    pub hardware_acceleration_type: Option<Box<crate::models::HardwareEncodingType>>,
    #[serde(rename = "TranscodeReasons", skip_serializing_if = "Option::is_none")]
    pub transcode_reasons: Option<TranscodeReasons>,
}

impl TranscodingInfo {
    pub fn new() -> TranscodingInfo {
        TranscodingInfo {
            audio_codec: None,
            video_codec: None,
            container: None,
            is_video_direct: None,
            is_audio_direct: None,
            bitrate: None,
            framerate: None,
            completion_percentage: None,
            width: None,
            height: None,
            audio_channels: None,
            hardware_acceleration_type: None,
            transcode_reasons: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TranscodeReasons {
    #[serde(rename = "ContainerNotSupported")]
    ContainerNotSupported,
    #[serde(rename = "VideoCodecNotSupported")]
    VideoCodecNotSupported,
    #[serde(rename = "AudioCodecNotSupported")]
    AudioCodecNotSupported,
    #[serde(rename = "SubtitleCodecNotSupported")]
    SubtitleCodecNotSupported,
    #[serde(rename = "AudioIsExternal")]
    AudioIsExternal,
    #[serde(rename = "SecondaryAudioNotSupported")]
    SecondaryAudioNotSupported,
    #[serde(rename = "VideoProfileNotSupported")]
    VideoProfileNotSupported,
    #[serde(rename = "VideoLevelNotSupported")]
    VideoLevelNotSupported,
    #[serde(rename = "VideoResolutionNotSupported")]
    VideoResolutionNotSupported,
    #[serde(rename = "VideoBitDepthNotSupported")]
    VideoBitDepthNotSupported,
    #[serde(rename = "VideoFramerateNotSupported")]
    VideoFramerateNotSupported,
    #[serde(rename = "RefFramesNotSupported")]
    RefFramesNotSupported,
    #[serde(rename = "AnamorphicVideoNotSupported")]
    AnamorphicVideoNotSupported,
    #[serde(rename = "InterlacedVideoNotSupported")]
    InterlacedVideoNotSupported,
    #[serde(rename = "AudioChannelsNotSupported")]
    AudioChannelsNotSupported,
    #[serde(rename = "AudioProfileNotSupported")]
    AudioProfileNotSupported,
    #[serde(rename = "AudioSampleRateNotSupported")]
    AudioSampleRateNotSupported,
    #[serde(rename = "AudioBitDepthNotSupported")]
    AudioBitDepthNotSupported,
    #[serde(rename = "ContainerBitrateExceedsLimit")]
    ContainerBitrateExceedsLimit,
    #[serde(rename = "VideoBitrateNotSupported")]
    VideoBitrateNotSupported,
    #[serde(rename = "AudioBitrateNotSupported")]
    AudioBitrateNotSupported,
    #[serde(rename = "UnknownVideoStreamInfo")]
    UnknownVideoStreamInfo,
    #[serde(rename = "UnknownAudioStreamInfo")]
    UnknownAudioStreamInfo,
    #[serde(rename = "DirectPlayError")]
    DirectPlayError,
    #[serde(rename = "VideoRangeTypeNotSupported")]
    VideoRangeTypeNotSupported,
}

impl Default for TranscodeReasons {
    fn default() -> TranscodeReasons {
        Self::ContainerNotSupported
    }
}

