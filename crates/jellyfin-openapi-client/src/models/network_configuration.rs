/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// NetworkConfiguration : Defines the Jellyfin.Networking.Configuration.NetworkConfiguration.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct NetworkConfiguration {
    /// Gets or sets a value indicating whether the server should force connections over HTTPS.
    #[serde(rename = "RequireHttps", skip_serializing_if = "Option::is_none")]
    pub require_https: Option<bool>,
    /// Gets or sets the filesystem path of an X.509 certificate to use for SSL.
    #[serde(rename = "CertificatePath", skip_serializing_if = "Option::is_none")]
    pub certificate_path: Option<String>,
    /// Gets or sets the password required to access the X.509 certificate data in the file specified by Jellyfin.Networking.Configuration.NetworkConfiguration.CertificatePath.
    #[serde(rename = "CertificatePassword", skip_serializing_if = "Option::is_none")]
    pub certificate_password: Option<String>,
    /// Gets or sets a value used to specify the URL prefix that your Jellyfin instance can be accessed at.
    #[serde(rename = "BaseUrl", skip_serializing_if = "Option::is_none")]
    pub base_url: Option<String>,
    /// Gets or sets the public HTTPS port.
    #[serde(rename = "PublicHttpsPort", skip_serializing_if = "Option::is_none")]
    pub public_https_port: Option<i32>,
    /// Gets or sets the HTTP server port number.
    #[serde(rename = "HttpServerPortNumber", skip_serializing_if = "Option::is_none")]
    pub http_server_port_number: Option<i32>,
    /// Gets or sets the HTTPS server port number.
    #[serde(rename = "HttpsPortNumber", skip_serializing_if = "Option::is_none")]
    pub https_port_number: Option<i32>,
    /// Gets or sets a value indicating whether to use HTTPS.
    #[serde(rename = "EnableHttps", skip_serializing_if = "Option::is_none")]
    pub enable_https: Option<bool>,
    /// Gets or sets the public mapped port.
    #[serde(rename = "PublicPort", skip_serializing_if = "Option::is_none")]
    pub public_port: Option<i32>,
    /// Gets or sets a value indicating whether the http port should be mapped as part of UPnP automatic port forwarding.
    #[serde(rename = "UPnPCreateHttpPortMap", skip_serializing_if = "Option::is_none")]
    pub upn_p_create_http_port_map: Option<bool>,
    /// Gets or sets the UDPPortRange.
    #[serde(rename = "UDPPortRange", skip_serializing_if = "Option::is_none")]
    pub udp_port_range: Option<String>,
    /// Gets or sets a value indicating whether gets or sets IPV6 capability.
    #[serde(rename = "EnableIPV6", skip_serializing_if = "Option::is_none")]
    pub enable_ipv6: Option<bool>,
    /// Gets or sets a value indicating whether gets or sets IPV4 capability.
    #[serde(rename = "EnableIPV4", skip_serializing_if = "Option::is_none")]
    pub enable_ipv4: Option<bool>,
    /// Gets or sets a value indicating whether detailed SSDP logs are sent to the console/log.  \"Emby.Dlna\": \"Debug\" must be set in logging.default.json for this property to have any effect.
    #[serde(rename = "EnableSSDPTracing", skip_serializing_if = "Option::is_none")]
    pub enable_ssdp_tracing: Option<bool>,
    /// Gets or sets the SSDPTracingFilter  Gets or sets a value indicating whether an IP address is to be used to filter the detailed ssdp logs that are being sent to the console/log.  If the setting \"Emby.Dlna\": \"Debug\" msut be set in logging.default.json for this property to work.
    #[serde(rename = "SSDPTracingFilter", skip_serializing_if = "Option::is_none")]
    pub ssdp_tracing_filter: Option<String>,
    /// Gets or sets the number of times SSDP UDP messages are sent.
    #[serde(rename = "UDPSendCount", skip_serializing_if = "Option::is_none")]
    pub udp_send_count: Option<i32>,
    /// Gets or sets the delay between each groups of SSDP messages (in ms).
    #[serde(rename = "UDPSendDelay", skip_serializing_if = "Option::is_none")]
    pub udp_send_delay: Option<i32>,
    /// Gets or sets a value indicating whether address names that match Jellyfin.Networking.Configuration.NetworkConfiguration.VirtualInterfaceNames should be Ignore for the purposes of binding.
    #[serde(rename = "IgnoreVirtualInterfaces", skip_serializing_if = "Option::is_none")]
    pub ignore_virtual_interfaces: Option<bool>,
    /// Gets or sets a value indicating the interfaces that should be ignored. The list can be comma separated. <seealso cref=\"P:Jellyfin.Networking.Configuration.NetworkConfiguration.IgnoreVirtualInterfaces\" />.
    #[serde(rename = "VirtualInterfaceNames", skip_serializing_if = "Option::is_none")]
    pub virtual_interface_names: Option<String>,
    /// Gets or sets the time (in seconds) between the pings of SSDP gateway monitor.
    #[serde(rename = "GatewayMonitorPeriod", skip_serializing_if = "Option::is_none")]
    pub gateway_monitor_period: Option<i32>,
    /// Gets a value indicating whether multi-socket binding is available.
    #[serde(rename = "EnableMultiSocketBinding", skip_serializing_if = "Option::is_none")]
    pub enable_multi_socket_binding: Option<bool>,
    /// Gets or sets a value indicating whether all IPv6 interfaces should be treated as on the internal network.  Depending on the address range implemented ULA ranges might not be used.
    #[serde(rename = "TrustAllIP6Interfaces", skip_serializing_if = "Option::is_none")]
    pub trust_all_ip6_interfaces: Option<bool>,
    /// Gets or sets the ports that HDHomerun uses.
    #[serde(rename = "HDHomerunPortRange", skip_serializing_if = "Option::is_none")]
    pub hd_homerun_port_range: Option<String>,
    /// Gets or sets the PublishedServerUriBySubnet  Gets or sets PublishedServerUri to advertise for specific subnets.
    #[serde(rename = "PublishedServerUriBySubnet", skip_serializing_if = "Option::is_none")]
    pub published_server_uri_by_subnet: Option<Vec<String>>,
    /// Gets or sets a value indicating whether Autodiscovery tracing is enabled.
    #[serde(rename = "AutoDiscoveryTracing", skip_serializing_if = "Option::is_none")]
    pub auto_discovery_tracing: Option<bool>,
    /// Gets or sets a value indicating whether Autodiscovery is enabled.
    #[serde(rename = "AutoDiscovery", skip_serializing_if = "Option::is_none")]
    pub auto_discovery: Option<bool>,
    /// Gets or sets the filter for remote IP connectivity. Used in conjuntion with <seealso cref=\"P:Jellyfin.Networking.Configuration.NetworkConfiguration.IsRemoteIPFilterBlacklist\" />.
    #[serde(rename = "RemoteIPFilter", skip_serializing_if = "Option::is_none")]
    pub remote_ip_filter: Option<Vec<String>>,
    /// Gets or sets a value indicating whether <seealso cref=\"P:Jellyfin.Networking.Configuration.NetworkConfiguration.RemoteIPFilter\" /> contains a blacklist or a whitelist. Default is a whitelist.
    #[serde(rename = "IsRemoteIPFilterBlacklist", skip_serializing_if = "Option::is_none")]
    pub is_remote_ip_filter_blacklist: Option<bool>,
    /// Gets or sets a value indicating whether to enable automatic port forwarding.
    #[serde(rename = "EnableUPnP", skip_serializing_if = "Option::is_none")]
    pub enable_upn_p: Option<bool>,
    /// Gets or sets a value indicating whether access outside of the LAN is permitted.
    #[serde(rename = "EnableRemoteAccess", skip_serializing_if = "Option::is_none")]
    pub enable_remote_access: Option<bool>,
    /// Gets or sets the subnets that are deemed to make up the LAN.
    #[serde(rename = "LocalNetworkSubnets", skip_serializing_if = "Option::is_none")]
    pub local_network_subnets: Option<Vec<String>>,
    /// Gets or sets the interface addresses which Jellyfin will bind to. If empty, all interfaces will be used.
    #[serde(rename = "LocalNetworkAddresses", skip_serializing_if = "Option::is_none")]
    pub local_network_addresses: Option<Vec<String>>,
    /// Gets or sets the known proxies. If the proxy is a network, it's added to the KnownNetworks.
    #[serde(rename = "KnownProxies", skip_serializing_if = "Option::is_none")]
    pub known_proxies: Option<Vec<String>>,
    /// Gets or sets a value indicating whether the published server uri is based on information in HTTP requests.
    #[serde(rename = "EnablePublishedServerUriByRequest", skip_serializing_if = "Option::is_none")]
    pub enable_published_server_uri_by_request: Option<bool>,
}

impl NetworkConfiguration {
    /// Defines the Jellyfin.Networking.Configuration.NetworkConfiguration.
    pub fn new() -> NetworkConfiguration {
        NetworkConfiguration {
            require_https: None,
            certificate_path: None,
            certificate_password: None,
            base_url: None,
            public_https_port: None,
            http_server_port_number: None,
            https_port_number: None,
            enable_https: None,
            public_port: None,
            upn_p_create_http_port_map: None,
            udp_port_range: None,
            enable_ipv6: None,
            enable_ipv4: None,
            enable_ssdp_tracing: None,
            ssdp_tracing_filter: None,
            udp_send_count: None,
            udp_send_delay: None,
            ignore_virtual_interfaces: None,
            virtual_interface_names: None,
            gateway_monitor_period: None,
            enable_multi_socket_binding: None,
            trust_all_ip6_interfaces: None,
            hd_homerun_port_range: None,
            published_server_uri_by_subnet: None,
            auto_discovery_tracing: None,
            auto_discovery: None,
            remote_ip_filter: None,
            is_remote_ip_filter_blacklist: None,
            enable_upn_p: None,
            enable_remote_access: None,
            local_network_subnets: None,
            local_network_addresses: None,
            known_proxies: None,
            enable_published_server_uri_by_request: None,
        }
    }
}


