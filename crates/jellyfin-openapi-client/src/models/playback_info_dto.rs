/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// PlaybackInfoDto : Plabyback info dto.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct PlaybackInfoDto {
    /// Gets or sets the playback userId.
    #[serde(rename = "UserId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    /// Gets or sets the max streaming bitrate.
    #[serde(rename = "MaxStreamingBitrate", skip_serializing_if = "Option::is_none")]
    pub max_streaming_bitrate: Option<i32>,
    /// Gets or sets the start time in ticks.
    #[serde(rename = "StartTimeTicks", skip_serializing_if = "Option::is_none")]
    pub start_time_ticks: Option<i64>,
    /// Gets or sets the audio stream index.
    #[serde(rename = "AudioStreamIndex", skip_serializing_if = "Option::is_none")]
    pub audio_stream_index: Option<i32>,
    /// Gets or sets the subtitle stream index.
    #[serde(rename = "SubtitleStreamIndex", skip_serializing_if = "Option::is_none")]
    pub subtitle_stream_index: Option<i32>,
    /// Gets or sets the max audio channels.
    #[serde(rename = "MaxAudioChannels", skip_serializing_if = "Option::is_none")]
    pub max_audio_channels: Option<i32>,
    /// Gets or sets the media source id.
    #[serde(rename = "MediaSourceId", skip_serializing_if = "Option::is_none")]
    pub media_source_id: Option<String>,
    /// Gets or sets the live stream id.
    #[serde(rename = "LiveStreamId", skip_serializing_if = "Option::is_none")]
    pub live_stream_id: Option<String>,
    #[serde(rename = "DeviceProfile", skip_serializing_if = "Option::is_none")]
    pub device_profile: Option<Box<crate::models::ClientCapabilitiesDeviceProfile>>,
    /// Gets or sets a value indicating whether to enable direct play.
    #[serde(rename = "EnableDirectPlay", skip_serializing_if = "Option::is_none")]
    pub enable_direct_play: Option<bool>,
    /// Gets or sets a value indicating whether to enable direct stream.
    #[serde(rename = "EnableDirectStream", skip_serializing_if = "Option::is_none")]
    pub enable_direct_stream: Option<bool>,
    /// Gets or sets a value indicating whether to enable transcoding.
    #[serde(rename = "EnableTranscoding", skip_serializing_if = "Option::is_none")]
    pub enable_transcoding: Option<bool>,
    /// Gets or sets a value indicating whether to enable video stream copy.
    #[serde(rename = "AllowVideoStreamCopy", skip_serializing_if = "Option::is_none")]
    pub allow_video_stream_copy: Option<bool>,
    /// Gets or sets a value indicating whether to allow audio stream copy.
    #[serde(rename = "AllowAudioStreamCopy", skip_serializing_if = "Option::is_none")]
    pub allow_audio_stream_copy: Option<bool>,
    /// Gets or sets a value indicating whether to auto open the live stream.
    #[serde(rename = "AutoOpenLiveStream", skip_serializing_if = "Option::is_none")]
    pub auto_open_live_stream: Option<bool>,
}

impl PlaybackInfoDto {
    /// Plabyback info dto.
    pub fn new() -> PlaybackInfoDto {
        PlaybackInfoDto {
            user_id: None,
            max_streaming_bitrate: None,
            start_time_ticks: None,
            audio_stream_index: None,
            subtitle_stream_index: None,
            max_audio_channels: None,
            media_source_id: None,
            live_stream_id: None,
            device_profile: None,
            enable_direct_play: None,
            enable_direct_stream: None,
            enable_transcoding: None,
            allow_video_stream_copy: None,
            allow_audio_stream_copy: None,
            auto_open_live_stream: None,
        }
    }
}


