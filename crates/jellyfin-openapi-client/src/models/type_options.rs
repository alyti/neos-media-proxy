/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.3
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TypeOptions {
    #[serde(rename = "Type", skip_serializing_if = "Option::is_none")]
    pub _type: Option<String>,
    #[serde(rename = "MetadataFetchers", skip_serializing_if = "Option::is_none")]
    pub metadata_fetchers: Option<Vec<String>>,
    #[serde(rename = "MetadataFetcherOrder", skip_serializing_if = "Option::is_none")]
    pub metadata_fetcher_order: Option<Vec<String>>,
    #[serde(rename = "ImageFetchers", skip_serializing_if = "Option::is_none")]
    pub image_fetchers: Option<Vec<String>>,
    #[serde(rename = "ImageFetcherOrder", skip_serializing_if = "Option::is_none")]
    pub image_fetcher_order: Option<Vec<String>>,
    #[serde(rename = "ImageOptions", skip_serializing_if = "Option::is_none")]
    pub image_options: Option<Vec<crate::models::ImageOption>>,
}

impl TypeOptions {
    pub fn new() -> TypeOptions {
        TypeOptions {
            _type: None,
            metadata_fetchers: None,
            metadata_fetcher_order: None,
            image_fetchers: None,
            image_fetcher_order: None,
            image_options: None,
        }
    }
}


