/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.3
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`delete_alternate_sources`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteAlternateSourcesError {
    Status404(crate::models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_additional_part`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAdditionalPartError {
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_video_stream`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetVideoStreamError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_video_stream_by_container`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetVideoStreamByContainerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_video_stream`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadVideoStreamError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_video_stream_by_container`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadVideoStreamByContainerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`merge_versions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum MergeVersionsError {
    Status400(crate::models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}


pub async fn delete_alternate_sources(configuration: &configuration::Configuration, item_id: &str) -> Result<(), Error<DeleteAlternateSourcesError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Videos/{itemId}/AlternateSources", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteAlternateSourcesError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_additional_part(configuration: &configuration::Configuration, item_id: &str, user_id: Option<&str>) -> Result<crate::models::BaseItemDtoQueryResult, Error<GetAdditionalPartError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Videos/{itemId}/AdditionalParts", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("userId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetAdditionalPartError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_video_stream(configuration: &configuration::Configuration, item_id: &str, container: Option<&str>, _static: Option<bool>, params: Option<&str>, tag: Option<&str>, device_profile_id: Option<&str>, play_session_id: Option<&str>, segment_container: Option<&str>, segment_length: Option<i32>, min_segments: Option<i32>, media_source_id: Option<&str>, device_id: Option<&str>, audio_codec: Option<&str>, enable_auto_stream_copy: Option<bool>, allow_video_stream_copy: Option<bool>, allow_audio_stream_copy: Option<bool>, break_on_non_key_frames: Option<bool>, audio_sample_rate: Option<i32>, max_audio_bit_depth: Option<i32>, audio_bit_rate: Option<i32>, audio_channels: Option<i32>, max_audio_channels: Option<i32>, profile: Option<&str>, level: Option<&str>, framerate: Option<f32>, max_framerate: Option<f32>, copy_timestamps: Option<bool>, start_time_ticks: Option<i64>, width: Option<i32>, height: Option<i32>, max_width: Option<i32>, max_height: Option<i32>, video_bit_rate: Option<i32>, subtitle_stream_index: Option<i32>, subtitle_method: Option<crate::models::SubtitleDeliveryMethod>, max_ref_frames: Option<i32>, max_video_bit_depth: Option<i32>, require_avc: Option<bool>, de_interlace: Option<bool>, require_non_anamorphic: Option<bool>, transcoding_max_audio_channels: Option<i32>, cpu_core_limit: Option<i32>, live_stream_id: Option<&str>, enable_mpegts_m2_ts_mode: Option<bool>, video_codec: Option<&str>, subtitle_codec: Option<&str>, transcode_reasons: Option<&str>, audio_stream_index: Option<i32>, video_stream_index: Option<i32>, context: Option<crate::models::EncodingContext>, stream_options: Option<::std::collections::HashMap<String, String>>) -> Result<std::path::PathBuf, Error<GetVideoStreamError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Videos/{itemId}/stream", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = container {
        local_var_req_builder = local_var_req_builder.query(&[("container", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = _static {
        local_var_req_builder = local_var_req_builder.query(&[("static", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = params {
        local_var_req_builder = local_var_req_builder.query(&[("params", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_profile_id {
        local_var_req_builder = local_var_req_builder.query(&[("deviceProfileId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = play_session_id {
        local_var_req_builder = local_var_req_builder.query(&[("playSessionId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = segment_container {
        local_var_req_builder = local_var_req_builder.query(&[("segmentContainer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = segment_length {
        local_var_req_builder = local_var_req_builder.query(&[("segmentLength", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = min_segments {
        local_var_req_builder = local_var_req_builder.query(&[("minSegments", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = media_source_id {
        local_var_req_builder = local_var_req_builder.query(&[("mediaSourceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id {
        local_var_req_builder = local_var_req_builder.query(&[("deviceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_codec {
        local_var_req_builder = local_var_req_builder.query(&[("audioCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_auto_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("enableAutoStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allow_video_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("allowVideoStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allow_audio_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("allowAudioStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = break_on_non_key_frames {
        local_var_req_builder = local_var_req_builder.query(&[("breakOnNonKeyFrames", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_sample_rate {
        local_var_req_builder = local_var_req_builder.query(&[("audioSampleRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_audio_bit_depth {
        local_var_req_builder = local_var_req_builder.query(&[("maxAudioBitDepth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_bit_rate {
        local_var_req_builder = local_var_req_builder.query(&[("audioBitRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("audioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("maxAudioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = profile {
        local_var_req_builder = local_var_req_builder.query(&[("profile", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = level {
        local_var_req_builder = local_var_req_builder.query(&[("level", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = framerate {
        local_var_req_builder = local_var_req_builder.query(&[("framerate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_framerate {
        local_var_req_builder = local_var_req_builder.query(&[("maxFramerate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = copy_timestamps {
        local_var_req_builder = local_var_req_builder.query(&[("copyTimestamps", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_time_ticks {
        local_var_req_builder = local_var_req_builder.query(&[("startTimeTicks", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_bit_rate {
        local_var_req_builder = local_var_req_builder.query(&[("videoBitRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_method {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleMethod", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_ref_frames {
        local_var_req_builder = local_var_req_builder.query(&[("maxRefFrames", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_video_bit_depth {
        local_var_req_builder = local_var_req_builder.query(&[("maxVideoBitDepth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = require_avc {
        local_var_req_builder = local_var_req_builder.query(&[("requireAvc", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = de_interlace {
        local_var_req_builder = local_var_req_builder.query(&[("deInterlace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = require_non_anamorphic {
        local_var_req_builder = local_var_req_builder.query(&[("requireNonAnamorphic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = transcoding_max_audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("transcodingMaxAudioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cpu_core_limit {
        local_var_req_builder = local_var_req_builder.query(&[("cpuCoreLimit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = live_stream_id {
        local_var_req_builder = local_var_req_builder.query(&[("liveStreamId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_mpegts_m2_ts_mode {
        local_var_req_builder = local_var_req_builder.query(&[("enableMpegtsM2TsMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_codec {
        local_var_req_builder = local_var_req_builder.query(&[("videoCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_codec {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = transcode_reasons {
        local_var_req_builder = local_var_req_builder.query(&[("transcodeReasons", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("audioStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("videoStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = context {
        local_var_req_builder = local_var_req_builder.query(&[("context", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stream_options {
        local_var_req_builder = local_var_req_builder.query(&[("streamOptions", &local_var_str.to_owned())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetVideoStreamError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_video_stream_by_container(configuration: &configuration::Configuration, item_id: &str, container: &str, _static: Option<bool>, params: Option<&str>, tag: Option<&str>, device_profile_id: Option<&str>, play_session_id: Option<&str>, segment_container: Option<&str>, segment_length: Option<i32>, min_segments: Option<i32>, media_source_id: Option<&str>, device_id: Option<&str>, audio_codec: Option<&str>, enable_auto_stream_copy: Option<bool>, allow_video_stream_copy: Option<bool>, allow_audio_stream_copy: Option<bool>, break_on_non_key_frames: Option<bool>, audio_sample_rate: Option<i32>, max_audio_bit_depth: Option<i32>, audio_bit_rate: Option<i32>, audio_channels: Option<i32>, max_audio_channels: Option<i32>, profile: Option<&str>, level: Option<&str>, framerate: Option<f32>, max_framerate: Option<f32>, copy_timestamps: Option<bool>, start_time_ticks: Option<i64>, width: Option<i32>, height: Option<i32>, max_width: Option<i32>, max_height: Option<i32>, video_bit_rate: Option<i32>, subtitle_stream_index: Option<i32>, subtitle_method: Option<crate::models::SubtitleDeliveryMethod>, max_ref_frames: Option<i32>, max_video_bit_depth: Option<i32>, require_avc: Option<bool>, de_interlace: Option<bool>, require_non_anamorphic: Option<bool>, transcoding_max_audio_channels: Option<i32>, cpu_core_limit: Option<i32>, live_stream_id: Option<&str>, enable_mpegts_m2_ts_mode: Option<bool>, video_codec: Option<&str>, subtitle_codec: Option<&str>, transcode_reasons: Option<&str>, audio_stream_index: Option<i32>, video_stream_index: Option<i32>, context: Option<crate::models::EncodingContext>, stream_options: Option<::std::collections::HashMap<String, String>>) -> Result<std::path::PathBuf, Error<GetVideoStreamByContainerError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Videos/{itemId}/stream.{container}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), container=crate::apis::urlencode(container));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = _static {
        local_var_req_builder = local_var_req_builder.query(&[("static", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = params {
        local_var_req_builder = local_var_req_builder.query(&[("params", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_profile_id {
        local_var_req_builder = local_var_req_builder.query(&[("deviceProfileId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = play_session_id {
        local_var_req_builder = local_var_req_builder.query(&[("playSessionId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = segment_container {
        local_var_req_builder = local_var_req_builder.query(&[("segmentContainer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = segment_length {
        local_var_req_builder = local_var_req_builder.query(&[("segmentLength", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = min_segments {
        local_var_req_builder = local_var_req_builder.query(&[("minSegments", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = media_source_id {
        local_var_req_builder = local_var_req_builder.query(&[("mediaSourceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id {
        local_var_req_builder = local_var_req_builder.query(&[("deviceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_codec {
        local_var_req_builder = local_var_req_builder.query(&[("audioCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_auto_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("enableAutoStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allow_video_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("allowVideoStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allow_audio_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("allowAudioStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = break_on_non_key_frames {
        local_var_req_builder = local_var_req_builder.query(&[("breakOnNonKeyFrames", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_sample_rate {
        local_var_req_builder = local_var_req_builder.query(&[("audioSampleRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_audio_bit_depth {
        local_var_req_builder = local_var_req_builder.query(&[("maxAudioBitDepth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_bit_rate {
        local_var_req_builder = local_var_req_builder.query(&[("audioBitRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("audioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("maxAudioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = profile {
        local_var_req_builder = local_var_req_builder.query(&[("profile", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = level {
        local_var_req_builder = local_var_req_builder.query(&[("level", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = framerate {
        local_var_req_builder = local_var_req_builder.query(&[("framerate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_framerate {
        local_var_req_builder = local_var_req_builder.query(&[("maxFramerate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = copy_timestamps {
        local_var_req_builder = local_var_req_builder.query(&[("copyTimestamps", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_time_ticks {
        local_var_req_builder = local_var_req_builder.query(&[("startTimeTicks", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_bit_rate {
        local_var_req_builder = local_var_req_builder.query(&[("videoBitRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_method {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleMethod", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_ref_frames {
        local_var_req_builder = local_var_req_builder.query(&[("maxRefFrames", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_video_bit_depth {
        local_var_req_builder = local_var_req_builder.query(&[("maxVideoBitDepth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = require_avc {
        local_var_req_builder = local_var_req_builder.query(&[("requireAvc", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = de_interlace {
        local_var_req_builder = local_var_req_builder.query(&[("deInterlace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = require_non_anamorphic {
        local_var_req_builder = local_var_req_builder.query(&[("requireNonAnamorphic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = transcoding_max_audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("transcodingMaxAudioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cpu_core_limit {
        local_var_req_builder = local_var_req_builder.query(&[("cpuCoreLimit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = live_stream_id {
        local_var_req_builder = local_var_req_builder.query(&[("liveStreamId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_mpegts_m2_ts_mode {
        local_var_req_builder = local_var_req_builder.query(&[("enableMpegtsM2TsMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_codec {
        local_var_req_builder = local_var_req_builder.query(&[("videoCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_codec {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = transcode_reasons {
        local_var_req_builder = local_var_req_builder.query(&[("transcodeReasons", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("audioStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("videoStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = context {
        local_var_req_builder = local_var_req_builder.query(&[("context", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stream_options {
        local_var_req_builder = local_var_req_builder.query(&[("streamOptions", &local_var_str.to_owned())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetVideoStreamByContainerError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_video_stream(configuration: &configuration::Configuration, item_id: &str, container: Option<&str>, _static: Option<bool>, params: Option<&str>, tag: Option<&str>, device_profile_id: Option<&str>, play_session_id: Option<&str>, segment_container: Option<&str>, segment_length: Option<i32>, min_segments: Option<i32>, media_source_id: Option<&str>, device_id: Option<&str>, audio_codec: Option<&str>, enable_auto_stream_copy: Option<bool>, allow_video_stream_copy: Option<bool>, allow_audio_stream_copy: Option<bool>, break_on_non_key_frames: Option<bool>, audio_sample_rate: Option<i32>, max_audio_bit_depth: Option<i32>, audio_bit_rate: Option<i32>, audio_channels: Option<i32>, max_audio_channels: Option<i32>, profile: Option<&str>, level: Option<&str>, framerate: Option<f32>, max_framerate: Option<f32>, copy_timestamps: Option<bool>, start_time_ticks: Option<i64>, width: Option<i32>, height: Option<i32>, max_width: Option<i32>, max_height: Option<i32>, video_bit_rate: Option<i32>, subtitle_stream_index: Option<i32>, subtitle_method: Option<crate::models::SubtitleDeliveryMethod>, max_ref_frames: Option<i32>, max_video_bit_depth: Option<i32>, require_avc: Option<bool>, de_interlace: Option<bool>, require_non_anamorphic: Option<bool>, transcoding_max_audio_channels: Option<i32>, cpu_core_limit: Option<i32>, live_stream_id: Option<&str>, enable_mpegts_m2_ts_mode: Option<bool>, video_codec: Option<&str>, subtitle_codec: Option<&str>, transcode_reasons: Option<&str>, audio_stream_index: Option<i32>, video_stream_index: Option<i32>, context: Option<crate::models::EncodingContext>, stream_options: Option<::std::collections::HashMap<String, String>>) -> Result<std::path::PathBuf, Error<HeadVideoStreamError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Videos/{itemId}/stream", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = container {
        local_var_req_builder = local_var_req_builder.query(&[("container", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = _static {
        local_var_req_builder = local_var_req_builder.query(&[("static", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = params {
        local_var_req_builder = local_var_req_builder.query(&[("params", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_profile_id {
        local_var_req_builder = local_var_req_builder.query(&[("deviceProfileId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = play_session_id {
        local_var_req_builder = local_var_req_builder.query(&[("playSessionId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = segment_container {
        local_var_req_builder = local_var_req_builder.query(&[("segmentContainer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = segment_length {
        local_var_req_builder = local_var_req_builder.query(&[("segmentLength", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = min_segments {
        local_var_req_builder = local_var_req_builder.query(&[("minSegments", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = media_source_id {
        local_var_req_builder = local_var_req_builder.query(&[("mediaSourceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id {
        local_var_req_builder = local_var_req_builder.query(&[("deviceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_codec {
        local_var_req_builder = local_var_req_builder.query(&[("audioCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_auto_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("enableAutoStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allow_video_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("allowVideoStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allow_audio_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("allowAudioStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = break_on_non_key_frames {
        local_var_req_builder = local_var_req_builder.query(&[("breakOnNonKeyFrames", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_sample_rate {
        local_var_req_builder = local_var_req_builder.query(&[("audioSampleRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_audio_bit_depth {
        local_var_req_builder = local_var_req_builder.query(&[("maxAudioBitDepth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_bit_rate {
        local_var_req_builder = local_var_req_builder.query(&[("audioBitRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("audioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("maxAudioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = profile {
        local_var_req_builder = local_var_req_builder.query(&[("profile", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = level {
        local_var_req_builder = local_var_req_builder.query(&[("level", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = framerate {
        local_var_req_builder = local_var_req_builder.query(&[("framerate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_framerate {
        local_var_req_builder = local_var_req_builder.query(&[("maxFramerate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = copy_timestamps {
        local_var_req_builder = local_var_req_builder.query(&[("copyTimestamps", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_time_ticks {
        local_var_req_builder = local_var_req_builder.query(&[("startTimeTicks", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_bit_rate {
        local_var_req_builder = local_var_req_builder.query(&[("videoBitRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_method {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleMethod", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_ref_frames {
        local_var_req_builder = local_var_req_builder.query(&[("maxRefFrames", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_video_bit_depth {
        local_var_req_builder = local_var_req_builder.query(&[("maxVideoBitDepth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = require_avc {
        local_var_req_builder = local_var_req_builder.query(&[("requireAvc", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = de_interlace {
        local_var_req_builder = local_var_req_builder.query(&[("deInterlace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = require_non_anamorphic {
        local_var_req_builder = local_var_req_builder.query(&[("requireNonAnamorphic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = transcoding_max_audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("transcodingMaxAudioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cpu_core_limit {
        local_var_req_builder = local_var_req_builder.query(&[("cpuCoreLimit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = live_stream_id {
        local_var_req_builder = local_var_req_builder.query(&[("liveStreamId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_mpegts_m2_ts_mode {
        local_var_req_builder = local_var_req_builder.query(&[("enableMpegtsM2TsMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_codec {
        local_var_req_builder = local_var_req_builder.query(&[("videoCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_codec {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = transcode_reasons {
        local_var_req_builder = local_var_req_builder.query(&[("transcodeReasons", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("audioStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("videoStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = context {
        local_var_req_builder = local_var_req_builder.query(&[("context", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stream_options {
        local_var_req_builder = local_var_req_builder.query(&[("streamOptions", &local_var_str.to_owned())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HeadVideoStreamError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_video_stream_by_container(configuration: &configuration::Configuration, item_id: &str, container: &str, _static: Option<bool>, params: Option<&str>, tag: Option<&str>, device_profile_id: Option<&str>, play_session_id: Option<&str>, segment_container: Option<&str>, segment_length: Option<i32>, min_segments: Option<i32>, media_source_id: Option<&str>, device_id: Option<&str>, audio_codec: Option<&str>, enable_auto_stream_copy: Option<bool>, allow_video_stream_copy: Option<bool>, allow_audio_stream_copy: Option<bool>, break_on_non_key_frames: Option<bool>, audio_sample_rate: Option<i32>, max_audio_bit_depth: Option<i32>, audio_bit_rate: Option<i32>, audio_channels: Option<i32>, max_audio_channels: Option<i32>, profile: Option<&str>, level: Option<&str>, framerate: Option<f32>, max_framerate: Option<f32>, copy_timestamps: Option<bool>, start_time_ticks: Option<i64>, width: Option<i32>, height: Option<i32>, max_width: Option<i32>, max_height: Option<i32>, video_bit_rate: Option<i32>, subtitle_stream_index: Option<i32>, subtitle_method: Option<crate::models::SubtitleDeliveryMethod>, max_ref_frames: Option<i32>, max_video_bit_depth: Option<i32>, require_avc: Option<bool>, de_interlace: Option<bool>, require_non_anamorphic: Option<bool>, transcoding_max_audio_channels: Option<i32>, cpu_core_limit: Option<i32>, live_stream_id: Option<&str>, enable_mpegts_m2_ts_mode: Option<bool>, video_codec: Option<&str>, subtitle_codec: Option<&str>, transcode_reasons: Option<&str>, audio_stream_index: Option<i32>, video_stream_index: Option<i32>, context: Option<crate::models::EncodingContext>, stream_options: Option<::std::collections::HashMap<String, String>>) -> Result<std::path::PathBuf, Error<HeadVideoStreamByContainerError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Videos/{itemId}/stream.{container}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), container=crate::apis::urlencode(container));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = _static {
        local_var_req_builder = local_var_req_builder.query(&[("static", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = params {
        local_var_req_builder = local_var_req_builder.query(&[("params", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_profile_id {
        local_var_req_builder = local_var_req_builder.query(&[("deviceProfileId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = play_session_id {
        local_var_req_builder = local_var_req_builder.query(&[("playSessionId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = segment_container {
        local_var_req_builder = local_var_req_builder.query(&[("segmentContainer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = segment_length {
        local_var_req_builder = local_var_req_builder.query(&[("segmentLength", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = min_segments {
        local_var_req_builder = local_var_req_builder.query(&[("minSegments", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = media_source_id {
        local_var_req_builder = local_var_req_builder.query(&[("mediaSourceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id {
        local_var_req_builder = local_var_req_builder.query(&[("deviceId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_codec {
        local_var_req_builder = local_var_req_builder.query(&[("audioCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_auto_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("enableAutoStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allow_video_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("allowVideoStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allow_audio_stream_copy {
        local_var_req_builder = local_var_req_builder.query(&[("allowAudioStreamCopy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = break_on_non_key_frames {
        local_var_req_builder = local_var_req_builder.query(&[("breakOnNonKeyFrames", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_sample_rate {
        local_var_req_builder = local_var_req_builder.query(&[("audioSampleRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_audio_bit_depth {
        local_var_req_builder = local_var_req_builder.query(&[("maxAudioBitDepth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_bit_rate {
        local_var_req_builder = local_var_req_builder.query(&[("audioBitRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("audioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("maxAudioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = profile {
        local_var_req_builder = local_var_req_builder.query(&[("profile", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = level {
        local_var_req_builder = local_var_req_builder.query(&[("level", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = framerate {
        local_var_req_builder = local_var_req_builder.query(&[("framerate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_framerate {
        local_var_req_builder = local_var_req_builder.query(&[("maxFramerate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = copy_timestamps {
        local_var_req_builder = local_var_req_builder.query(&[("copyTimestamps", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = start_time_ticks {
        local_var_req_builder = local_var_req_builder.query(&[("startTimeTicks", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_bit_rate {
        local_var_req_builder = local_var_req_builder.query(&[("videoBitRate", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_method {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleMethod", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_ref_frames {
        local_var_req_builder = local_var_req_builder.query(&[("maxRefFrames", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_video_bit_depth {
        local_var_req_builder = local_var_req_builder.query(&[("maxVideoBitDepth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = require_avc {
        local_var_req_builder = local_var_req_builder.query(&[("requireAvc", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = de_interlace {
        local_var_req_builder = local_var_req_builder.query(&[("deInterlace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = require_non_anamorphic {
        local_var_req_builder = local_var_req_builder.query(&[("requireNonAnamorphic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = transcoding_max_audio_channels {
        local_var_req_builder = local_var_req_builder.query(&[("transcodingMaxAudioChannels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cpu_core_limit {
        local_var_req_builder = local_var_req_builder.query(&[("cpuCoreLimit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = live_stream_id {
        local_var_req_builder = local_var_req_builder.query(&[("liveStreamId", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enable_mpegts_m2_ts_mode {
        local_var_req_builder = local_var_req_builder.query(&[("enableMpegtsM2TsMode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_codec {
        local_var_req_builder = local_var_req_builder.query(&[("videoCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subtitle_codec {
        local_var_req_builder = local_var_req_builder.query(&[("subtitleCodec", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = transcode_reasons {
        local_var_req_builder = local_var_req_builder.query(&[("transcodeReasons", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = audio_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("audioStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = video_stream_index {
        local_var_req_builder = local_var_req_builder.query(&[("videoStreamIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = context {
        local_var_req_builder = local_var_req_builder.query(&[("context", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = stream_options {
        local_var_req_builder = local_var_req_builder.query(&[("streamOptions", &local_var_str.to_owned())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HeadVideoStreamByContainerError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn merge_versions(configuration: &configuration::Configuration, ids: Vec<String>) -> Result<(), Error<MergeVersionsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Videos/MergeVersions", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = match "multi" {
        "multi" => local_var_req_builder.query(&ids.into_iter().map(|p| ("ids".to_owned(), p)).collect::<Vec<(std::string::String, std::string::String)>>()),
        _ => local_var_req_builder.query(&[("ids", &ids.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(",").to_string())]),
    };
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<MergeVersionsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

