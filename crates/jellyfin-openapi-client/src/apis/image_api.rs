/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 10.8.3
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`delete_custom_splashscreen`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCustomSplashscreenError {
    Status403(),
    Status401(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_item_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteItemImageError {
    Status404(crate::models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_item_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteItemImageByIndexError {
    Status404(crate::models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_user_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteUserImageError {
    Status403(crate::models::ProblemDetails),
    Status401(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_user_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteUserImageByIndexError {
    Status403(crate::models::ProblemDetails),
    Status401(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_artist_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetArtistImageError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_genre_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetGenreImageError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_genre_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetGenreImageByIndexError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_item_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetItemImageError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_item_image2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetItemImage2Error {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_item_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetItemImageByIndexError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_item_image_infos`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetItemImageInfosError {
    Status404(crate::models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_music_genre_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMusicGenreImageError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_music_genre_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMusicGenreImageByIndexError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_person_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPersonImageError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_person_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPersonImageByIndexError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_splashscreen`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSplashscreenError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_studio_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetStudioImageError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_studio_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetStudioImageByIndexError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_user_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetUserImageError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_user_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetUserImageByIndexError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_artist_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadArtistImageError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_genre_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadGenreImageError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_genre_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadGenreImageByIndexError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_item_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadItemImageError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_item_image2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadItemImage2Error {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_item_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadItemImageByIndexError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_music_genre_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadMusicGenreImageError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_music_genre_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadMusicGenreImageByIndexError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_person_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadPersonImageError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_person_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadPersonImageByIndexError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_studio_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadStudioImageError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_studio_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadStudioImageByIndexError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_user_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadUserImageError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`head_user_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HeadUserImageByIndexError {
    Status404(crate::models::ProblemDetails),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_user_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostUserImageError {
    Status403(crate::models::ProblemDetails),
    Status401(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`post_user_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostUserImageByIndexError {
    Status403(crate::models::ProblemDetails),
    Status401(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`set_item_image`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetItemImageError {
    Status404(crate::models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`set_item_image_by_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetItemImageByIndexError {
    Status404(crate::models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_item_image_index`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateItemImageIndexError {
    Status404(crate::models::ProblemDetails),
    Status401(),
    Status403(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`upload_custom_splashscreen`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UploadCustomSplashscreenError {
    Status400(crate::models::ProblemDetails),
    Status403(crate::models::ProblemDetails),
    Status401(),
    UnknownValue(serde_json::Value),
}


pub async fn delete_custom_splashscreen(configuration: &configuration::Configuration, ) -> Result<(), Error<DeleteCustomSplashscreenError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Branding/Splashscreen", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteCustomSplashscreenError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_item_image(configuration: &configuration::Configuration, item_id: &str, image_type: crate::models::ImageType, image_index: Option<i32>) -> Result<(), Error<DeleteItemImageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Images/{imageType}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), imageType=image_type);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteItemImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_item_image_by_index(configuration: &configuration::Configuration, item_id: &str, image_type: crate::models::ImageType, image_index: i32) -> Result<(), Error<DeleteItemImageByIndexError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), imageType=image_type, imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteItemImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_user_image(configuration: &configuration::Configuration, user_id: &str, image_type: crate::models::ImageType, index: Option<i32>) -> Result<(), Error<DeleteUserImageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Users/{userId}/Images/{imageType}", local_var_configuration.base_path, userId=crate::apis::urlencode(user_id), imageType=image_type);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = index {
        local_var_req_builder = local_var_req_builder.query(&[("index", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteUserImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete_user_image_by_index(configuration: &configuration::Configuration, user_id: &str, image_type: crate::models::ImageType, index: i32) -> Result<(), Error<DeleteUserImageByIndexError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Users/{userId}/Images/{imageType}/{index}", local_var_configuration.base_path, userId=crate::apis::urlencode(user_id), imageType=image_type, index=index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteUserImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_artist_image(configuration: &configuration::Configuration, name: &str, image_type: crate::models::ImageType, image_index: i32, tag: Option<&str>, format: Option<crate::models::ImageFormat>, max_width: Option<i32>, max_height: Option<i32>, percent_played: Option<f64>, unplayed_count: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, crop_whitespace: Option<bool>, add_played_indicator: Option<bool>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>) -> Result<std::path::PathBuf, Error<GetArtistImageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Artists/{name}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=image_type, imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetArtistImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_genre_image(configuration: &configuration::Configuration, name: &str, image_type: crate::models::ImageType, tag: Option<&str>, format: Option<crate::models::ImageFormat>, max_width: Option<i32>, max_height: Option<i32>, percent_played: Option<f64>, unplayed_count: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, crop_whitespace: Option<bool>, add_played_indicator: Option<bool>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>, image_index: Option<i32>) -> Result<std::path::PathBuf, Error<GetGenreImageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Genres/{name}/Images/{imageType}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=image_type);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetGenreImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_genre_image_by_index(configuration: &configuration::Configuration, name: &str, image_type: crate::models::ImageType, image_index: i32, tag: Option<&str>, format: Option<crate::models::ImageFormat>, max_width: Option<i32>, max_height: Option<i32>, percent_played: Option<f64>, unplayed_count: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, crop_whitespace: Option<bool>, add_played_indicator: Option<bool>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>) -> Result<std::path::PathBuf, Error<GetGenreImageByIndexError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Genres/{name}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=image_type, imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetGenreImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_item_image(configuration: &configuration::Configuration, item_id: &str, image_type: crate::models::ImageType, max_width: Option<i32>, max_height: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, tag: Option<&str>, crop_whitespace: Option<bool>, format: Option<crate::models::ImageFormat>, add_played_indicator: Option<bool>, percent_played: Option<f64>, unplayed_count: Option<i32>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>, image_index: Option<i32>) -> Result<std::path::PathBuf, Error<GetItemImageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Images/{imageType}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), imageType=image_type);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetItemImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_item_image2(configuration: &configuration::Configuration, item_id: &str, image_type: crate::models::ImageType, max_width: i32, max_height: i32, tag: &str, format: crate::models::ImageFormat, percent_played: f64, unplayed_count: i32, image_index: i32, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, crop_whitespace: Option<bool>, add_played_indicator: Option<bool>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>) -> Result<std::path::PathBuf, Error<GetItemImage2Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), imageType=image_type, maxWidth=max_width, maxHeight=max_height, tag=crate::apis::urlencode(tag), format=format, percentPlayed=percent_played, unplayedCount=unplayed_count, imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetItemImage2Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_item_image_by_index(configuration: &configuration::Configuration, item_id: &str, image_type: crate::models::ImageType, image_index: i32, max_width: Option<i32>, max_height: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, tag: Option<&str>, crop_whitespace: Option<bool>, format: Option<crate::models::ImageFormat>, add_played_indicator: Option<bool>, percent_played: Option<f64>, unplayed_count: Option<i32>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>) -> Result<std::path::PathBuf, Error<GetItemImageByIndexError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), imageType=image_type, imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetItemImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_item_image_infos(configuration: &configuration::Configuration, item_id: &str) -> Result<Vec<crate::models::ImageInfo>, Error<GetItemImageInfosError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Images", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetItemImageInfosError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_music_genre_image(configuration: &configuration::Configuration, name: &str, image_type: crate::models::ImageType, tag: Option<&str>, format: Option<crate::models::ImageFormat>, max_width: Option<i32>, max_height: Option<i32>, percent_played: Option<f64>, unplayed_count: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, crop_whitespace: Option<bool>, add_played_indicator: Option<bool>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>, image_index: Option<i32>) -> Result<std::path::PathBuf, Error<GetMusicGenreImageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/MusicGenres/{name}/Images/{imageType}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=image_type);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetMusicGenreImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_music_genre_image_by_index(configuration: &configuration::Configuration, name: &str, image_type: crate::models::ImageType, image_index: i32, tag: Option<&str>, format: Option<crate::models::ImageFormat>, max_width: Option<i32>, max_height: Option<i32>, percent_played: Option<f64>, unplayed_count: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, crop_whitespace: Option<bool>, add_played_indicator: Option<bool>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>) -> Result<std::path::PathBuf, Error<GetMusicGenreImageByIndexError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/MusicGenres/{name}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=image_type, imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetMusicGenreImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_person_image(configuration: &configuration::Configuration, name: &str, image_type: crate::models::ImageType, tag: Option<&str>, format: Option<crate::models::ImageFormat>, max_width: Option<i32>, max_height: Option<i32>, percent_played: Option<f64>, unplayed_count: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, crop_whitespace: Option<bool>, add_played_indicator: Option<bool>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>, image_index: Option<i32>) -> Result<std::path::PathBuf, Error<GetPersonImageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Persons/{name}/Images/{imageType}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=image_type);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPersonImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_person_image_by_index(configuration: &configuration::Configuration, name: &str, image_type: crate::models::ImageType, image_index: i32, tag: Option<&str>, format: Option<crate::models::ImageFormat>, max_width: Option<i32>, max_height: Option<i32>, percent_played: Option<f64>, unplayed_count: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, crop_whitespace: Option<bool>, add_played_indicator: Option<bool>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>) -> Result<std::path::PathBuf, Error<GetPersonImageByIndexError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Persons/{name}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=image_type, imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPersonImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_splashscreen(configuration: &configuration::Configuration, tag: Option<&str>, format: Option<crate::models::ImageFormat>, max_width: Option<i32>, max_height: Option<i32>, width: Option<i32>, height: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>, quality: Option<i32>) -> Result<std::path::PathBuf, Error<GetSplashscreenError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Branding/Splashscreen", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetSplashscreenError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_studio_image(configuration: &configuration::Configuration, name: &str, image_type: crate::models::ImageType, tag: Option<&str>, format: Option<crate::models::ImageFormat>, max_width: Option<i32>, max_height: Option<i32>, percent_played: Option<f64>, unplayed_count: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, crop_whitespace: Option<bool>, add_played_indicator: Option<bool>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>, image_index: Option<i32>) -> Result<std::path::PathBuf, Error<GetStudioImageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Studios/{name}/Images/{imageType}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=image_type);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetStudioImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_studio_image_by_index(configuration: &configuration::Configuration, name: &str, image_type: crate::models::ImageType, image_index: i32, tag: Option<&str>, format: Option<crate::models::ImageFormat>, max_width: Option<i32>, max_height: Option<i32>, percent_played: Option<f64>, unplayed_count: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, crop_whitespace: Option<bool>, add_played_indicator: Option<bool>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>) -> Result<std::path::PathBuf, Error<GetStudioImageByIndexError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Studios/{name}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=image_type, imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetStudioImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_user_image(configuration: &configuration::Configuration, user_id: &str, image_type: crate::models::ImageType, tag: Option<&str>, format: Option<crate::models::ImageFormat>, max_width: Option<i32>, max_height: Option<i32>, percent_played: Option<f64>, unplayed_count: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, crop_whitespace: Option<bool>, add_played_indicator: Option<bool>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>, image_index: Option<i32>) -> Result<std::path::PathBuf, Error<GetUserImageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Users/{userId}/Images/{imageType}", local_var_configuration.base_path, userId=crate::apis::urlencode(user_id), imageType=image_type);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetUserImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_user_image_by_index(configuration: &configuration::Configuration, user_id: &str, image_type: crate::models::ImageType, image_index: i32, tag: Option<&str>, format: Option<crate::models::ImageFormat>, max_width: Option<i32>, max_height: Option<i32>, percent_played: Option<f64>, unplayed_count: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, crop_whitespace: Option<bool>, add_played_indicator: Option<bool>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>) -> Result<std::path::PathBuf, Error<GetUserImageByIndexError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Users/{userId}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, userId=crate::apis::urlencode(user_id), imageType=image_type, imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetUserImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_artist_image(configuration: &configuration::Configuration, name: &str, image_type: crate::models::ImageType, image_index: i32, tag: Option<&str>, format: Option<crate::models::ImageFormat>, max_width: Option<i32>, max_height: Option<i32>, percent_played: Option<f64>, unplayed_count: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, crop_whitespace: Option<bool>, add_played_indicator: Option<bool>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>) -> Result<std::path::PathBuf, Error<HeadArtistImageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Artists/{name}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=image_type, imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HeadArtistImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_genre_image(configuration: &configuration::Configuration, name: &str, image_type: crate::models::ImageType, tag: Option<&str>, format: Option<crate::models::ImageFormat>, max_width: Option<i32>, max_height: Option<i32>, percent_played: Option<f64>, unplayed_count: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, crop_whitespace: Option<bool>, add_played_indicator: Option<bool>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>, image_index: Option<i32>) -> Result<std::path::PathBuf, Error<HeadGenreImageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Genres/{name}/Images/{imageType}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=image_type);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HeadGenreImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_genre_image_by_index(configuration: &configuration::Configuration, name: &str, image_type: crate::models::ImageType, image_index: i32, tag: Option<&str>, format: Option<crate::models::ImageFormat>, max_width: Option<i32>, max_height: Option<i32>, percent_played: Option<f64>, unplayed_count: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, crop_whitespace: Option<bool>, add_played_indicator: Option<bool>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>) -> Result<std::path::PathBuf, Error<HeadGenreImageByIndexError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Genres/{name}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=image_type, imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HeadGenreImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_item_image(configuration: &configuration::Configuration, item_id: &str, image_type: crate::models::ImageType, max_width: Option<i32>, max_height: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, tag: Option<&str>, crop_whitespace: Option<bool>, format: Option<crate::models::ImageFormat>, add_played_indicator: Option<bool>, percent_played: Option<f64>, unplayed_count: Option<i32>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>, image_index: Option<i32>) -> Result<std::path::PathBuf, Error<HeadItemImageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Images/{imageType}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), imageType=image_type);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HeadItemImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_item_image2(configuration: &configuration::Configuration, item_id: &str, image_type: crate::models::ImageType, max_width: i32, max_height: i32, tag: &str, format: crate::models::ImageFormat, percent_played: f64, unplayed_count: i32, image_index: i32, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, crop_whitespace: Option<bool>, add_played_indicator: Option<bool>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>) -> Result<std::path::PathBuf, Error<HeadItemImage2Error>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), imageType=image_type, maxWidth=max_width, maxHeight=max_height, tag=crate::apis::urlencode(tag), format=format, percentPlayed=percent_played, unplayedCount=unplayed_count, imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HeadItemImage2Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_item_image_by_index(configuration: &configuration::Configuration, item_id: &str, image_type: crate::models::ImageType, image_index: i32, max_width: Option<i32>, max_height: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, tag: Option<&str>, crop_whitespace: Option<bool>, format: Option<crate::models::ImageFormat>, add_played_indicator: Option<bool>, percent_played: Option<f64>, unplayed_count: Option<i32>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>) -> Result<std::path::PathBuf, Error<HeadItemImageByIndexError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), imageType=image_type, imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HeadItemImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_music_genre_image(configuration: &configuration::Configuration, name: &str, image_type: crate::models::ImageType, tag: Option<&str>, format: Option<crate::models::ImageFormat>, max_width: Option<i32>, max_height: Option<i32>, percent_played: Option<f64>, unplayed_count: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, crop_whitespace: Option<bool>, add_played_indicator: Option<bool>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>, image_index: Option<i32>) -> Result<std::path::PathBuf, Error<HeadMusicGenreImageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/MusicGenres/{name}/Images/{imageType}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=image_type);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HeadMusicGenreImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_music_genre_image_by_index(configuration: &configuration::Configuration, name: &str, image_type: crate::models::ImageType, image_index: i32, tag: Option<&str>, format: Option<crate::models::ImageFormat>, max_width: Option<i32>, max_height: Option<i32>, percent_played: Option<f64>, unplayed_count: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, crop_whitespace: Option<bool>, add_played_indicator: Option<bool>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>) -> Result<std::path::PathBuf, Error<HeadMusicGenreImageByIndexError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/MusicGenres/{name}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=image_type, imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HeadMusicGenreImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_person_image(configuration: &configuration::Configuration, name: &str, image_type: crate::models::ImageType, tag: Option<&str>, format: Option<crate::models::ImageFormat>, max_width: Option<i32>, max_height: Option<i32>, percent_played: Option<f64>, unplayed_count: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, crop_whitespace: Option<bool>, add_played_indicator: Option<bool>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>, image_index: Option<i32>) -> Result<std::path::PathBuf, Error<HeadPersonImageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Persons/{name}/Images/{imageType}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=image_type);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HeadPersonImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_person_image_by_index(configuration: &configuration::Configuration, name: &str, image_type: crate::models::ImageType, image_index: i32, tag: Option<&str>, format: Option<crate::models::ImageFormat>, max_width: Option<i32>, max_height: Option<i32>, percent_played: Option<f64>, unplayed_count: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, crop_whitespace: Option<bool>, add_played_indicator: Option<bool>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>) -> Result<std::path::PathBuf, Error<HeadPersonImageByIndexError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Persons/{name}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=image_type, imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HeadPersonImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_studio_image(configuration: &configuration::Configuration, name: &str, image_type: crate::models::ImageType, tag: Option<&str>, format: Option<crate::models::ImageFormat>, max_width: Option<i32>, max_height: Option<i32>, percent_played: Option<f64>, unplayed_count: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, crop_whitespace: Option<bool>, add_played_indicator: Option<bool>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>, image_index: Option<i32>) -> Result<std::path::PathBuf, Error<HeadStudioImageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Studios/{name}/Images/{imageType}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=image_type);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HeadStudioImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_studio_image_by_index(configuration: &configuration::Configuration, name: &str, image_type: crate::models::ImageType, image_index: i32, tag: Option<&str>, format: Option<crate::models::ImageFormat>, max_width: Option<i32>, max_height: Option<i32>, percent_played: Option<f64>, unplayed_count: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, crop_whitespace: Option<bool>, add_played_indicator: Option<bool>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>) -> Result<std::path::PathBuf, Error<HeadStudioImageByIndexError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Studios/{name}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, name=crate::apis::urlencode(name), imageType=image_type, imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HeadStudioImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_user_image(configuration: &configuration::Configuration, user_id: &str, image_type: crate::models::ImageType, tag: Option<&str>, format: Option<crate::models::ImageFormat>, max_width: Option<i32>, max_height: Option<i32>, percent_played: Option<f64>, unplayed_count: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, crop_whitespace: Option<bool>, add_played_indicator: Option<bool>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>, image_index: Option<i32>) -> Result<std::path::PathBuf, Error<HeadUserImageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Users/{userId}/Images/{imageType}", local_var_configuration.base_path, userId=crate::apis::urlencode(user_id), imageType=image_type);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = image_index {
        local_var_req_builder = local_var_req_builder.query(&[("imageIndex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HeadUserImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn head_user_image_by_index(configuration: &configuration::Configuration, user_id: &str, image_type: crate::models::ImageType, image_index: i32, tag: Option<&str>, format: Option<crate::models::ImageFormat>, max_width: Option<i32>, max_height: Option<i32>, percent_played: Option<f64>, unplayed_count: Option<i32>, width: Option<i32>, height: Option<i32>, quality: Option<i32>, fill_width: Option<i32>, fill_height: Option<i32>, crop_whitespace: Option<bool>, add_played_indicator: Option<bool>, blur: Option<i32>, background_color: Option<&str>, foreground_layer: Option<&str>) -> Result<std::path::PathBuf, Error<HeadUserImageByIndexError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Users/{userId}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, userId=crate::apis::urlencode(user_id), imageType=image_type, imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::HEAD, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = format {
        local_var_req_builder = local_var_req_builder.query(&[("format", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_width {
        local_var_req_builder = local_var_req_builder.query(&[("maxWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_height {
        local_var_req_builder = local_var_req_builder.query(&[("maxHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = percent_played {
        local_var_req_builder = local_var_req_builder.query(&[("percentPlayed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unplayed_count {
        local_var_req_builder = local_var_req_builder.query(&[("unplayedCount", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = height {
        local_var_req_builder = local_var_req_builder.query(&[("height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = quality {
        local_var_req_builder = local_var_req_builder.query(&[("quality", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_width {
        local_var_req_builder = local_var_req_builder.query(&[("fillWidth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = fill_height {
        local_var_req_builder = local_var_req_builder.query(&[("fillHeight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = crop_whitespace {
        local_var_req_builder = local_var_req_builder.query(&[("cropWhitespace", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = add_played_indicator {
        local_var_req_builder = local_var_req_builder.query(&[("addPlayedIndicator", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = blur {
        local_var_req_builder = local_var_req_builder.query(&[("blur", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = background_color {
        local_var_req_builder = local_var_req_builder.query(&[("backgroundColor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = foreground_layer {
        local_var_req_builder = local_var_req_builder.query(&[("foregroundLayer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<HeadUserImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn post_user_image(configuration: &configuration::Configuration, user_id: &str, image_type: crate::models::ImageType, index: Option<i32>, body: Option<std::path::PathBuf>) -> Result<(), Error<PostUserImageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Users/{userId}/Images/{imageType}", local_var_configuration.base_path, userId=crate::apis::urlencode(user_id), imageType=image_type);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = index {
        local_var_req_builder = local_var_req_builder.query(&[("index", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<PostUserImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn post_user_image_by_index(configuration: &configuration::Configuration, user_id: &str, image_type: crate::models::ImageType, index: i32, body: Option<std::path::PathBuf>) -> Result<(), Error<PostUserImageByIndexError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Users/{userId}/Images/{imageType}/{index}", local_var_configuration.base_path, userId=crate::apis::urlencode(user_id), imageType=image_type, index=index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<PostUserImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn set_item_image(configuration: &configuration::Configuration, item_id: &str, image_type: crate::models::ImageType, body: Option<std::path::PathBuf>) -> Result<(), Error<SetItemImageError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Images/{imageType}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), imageType=image_type);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<SetItemImageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn set_item_image_by_index(configuration: &configuration::Configuration, item_id: &str, image_type: crate::models::ImageType, image_index: i32, body: Option<std::path::PathBuf>) -> Result<(), Error<SetItemImageByIndexError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Images/{imageType}/{imageIndex}", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), imageType=image_type, imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<SetItemImageByIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn update_item_image_index(configuration: &configuration::Configuration, item_id: &str, image_type: crate::models::ImageType, image_index: i32, new_index: i32) -> Result<(), Error<UpdateItemImageIndexError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Items/{itemId}/Images/{imageType}/{imageIndex}/Index", local_var_configuration.base_path, itemId=crate::apis::urlencode(item_id), imageType=image_type, imageIndex=image_index);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("newIndex", &new_index.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<UpdateItemImageIndexError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn upload_custom_splashscreen(configuration: &configuration::Configuration, body: Option<std::path::PathBuf>) -> Result<(), Error<UploadCustomSplashscreenError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/Branding/Splashscreen", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<UploadCustomSplashscreenError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

